package backward;

import com.ftn.sbnz.model.models.GradProgram;
import com.ftn.sbnz.model.models.Requirement;
import com.ftn.sbnz.model.models.Student;
import com.ftn.sbnz.model.models.Person;
import com.ftn.sbnz.model.models.Professor;
import com.ftn.sbnz.model.models.Mentored;
import com.ftn.sbnz.model.models.University;
import com.ftn.sbnz.model.events.FinancialAid;
import java.util.List;

global Professor mentor;
global java.util.ArrayList results;

query CheckStudentRequirements (Student $student, GradProgram $program)
    Requirement($requiredScores: testScores, $requiredExperience: researchExperience) from $program.getRequirement()
        $testName: String() from $requiredScores.keySet()
        eval($student.getTestScores().containsKey($testName) && Double.parseDouble($student.getTestScores().get($testName).toString()) >= Double.parseDouble($requiredScores.get($testName).toString()))
        $requiredExp: String() from $requiredExperience
        eval($student.getResearchExperience().contains($requiredExp))
    $student1 : Student(this == $student)
end


query FindMentorsAndStudents(Person $mentor,Person $student)
//exists(
    Mentored(mentor == $mentor, student == $student)
    ||(
        Mentored($mentor, x;) and FindMentorsAndStudents(x,$student;)
//    )
)
end


rule "Trigger CheckStudentRequirements Query"
    when
        $studentProf : Professor(this != mentor)
        FindMentorsAndStudents(mentor,$studentProf;)
    then
    results.add($studentProf);
       System.out.println("Mentor: " + mentor.getName() + ", Student: " + $studentProf.getName());

end
