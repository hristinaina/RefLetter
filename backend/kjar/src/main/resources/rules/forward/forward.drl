package forward;

import com.ftn.sbnz.model.models.GradProgram;
import com.ftn.sbnz.model.models.Requirement;
import com.ftn.sbnz.model.models.Student;
import com.ftn.sbnz.model.models.University;
import com.ftn.sbnz.model.events.FinancialAid;

rule "Check if GradProgram contains Student's interest"
    when
        $student: Student($interest: researchInterest)
        $program: GradProgram($requirement: requirement)
        $researchArea: String() from $requirement.getResearchInterest()
        eval($interest.contains($researchArea))
    then
        System.out.println("The GradProgram " + $program.getName() + " at " + $program.getUniversity().getName() + " contains the interest of the student " + $student.getName());
end

rule "Check if Student matches GradProgram's test scores and research experience"
    when
        $student: Student($testScores: testScores, $experience: researchExperience)
        $program: GradProgram($requirement: requirement)
        Requirement($requiredScores: testScores, $requiredExperience: researchExperience) from $requirement
        $testName: String() from $requiredScores.keySet()
        eval($testScores.containsKey($testName) && Double.parseDouble($testScores.get($testName).toString()) >= Double.parseDouble($requiredScores.get($testName).toString()))
        $requiredExp: String() from $requiredExperience
        eval($experience.contains($requiredExp))
    then
        System.out.println("The student " + $student.getName() + " at " + $program.getUniversity().getName() + " matches the test scores and research experience requirements of the GradProgram " + $program.getName());
end


rule "Calculate University score based on Student and University parameters"
    when
        $student: Student($location: location)
        $university: University($uniLocation: location, $rank: rank, $numberOfStudents: numberOfStudents, $studentPerStaff: studentPerStaff, $internationalStudentPercent: internationalStudentPercent, $overallScore: overallScore, $researchScore: researchScore, $citationScore: citationScore)
    then
        double score = 0.0;
        if ($location.equals($uniLocation)) {
            score += 10;
        }
        score += (100 - Double.parseDouble($rank)) * 5;
        score += $numberOfStudents * 0.01;
        score += $studentPerStaff;
        score += $internationalStudentPercent;
        score += Double.parseDouble($overallScore);
        score += $researchScore;
        score += $citationScore;

        System.out.println("The score for the University " + $university.getName() + " based on the Student " + $student.getName() + " is " + score);
end

rule "Check Financial Aid for Student"
    when
        $student: Student($testScores: testScores,$experience: researchExperience, requiresFinancialAid == true)
        $gradProgram: GradProgram($programName: name, $university: university,$financialAids: financialAids)
         FinancialAid($aidType: type, $amount: amount,$requirement: requirement) from $financialAids
        Requirement($requiredScores: testScores, $requiredExperience: researchExperience) from $requirement
        $testName: String() from $requiredScores.keySet()
        eval($testScores.containsKey($testName) && Double.parseDouble($testScores.get($testName).toString()) >= Double.parseDouble($requiredScores.get($testName).toString()))
        $requiredExp: String() from $requiredExperience
        eval($experience.contains($requiredExp))
    then
        System.out.println("The student " + $student.getName() + " is eligible for financial aid of type " + $aidType + " with an amount of " + $amount + " for the program " + $programName + " at the university " + $university.getName());
end

